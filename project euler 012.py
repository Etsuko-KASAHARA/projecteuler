import math
##the sequence of triangle number is generated by adding the natural numbers. So the 7th
##triangle number would be 1+2+3+4+5+6+7=28. the first ten terms would be:
##1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
##let us list the factors of the first seven triangle numbers:
"""
1:1
3:1,3
6:1,2,3,6
10:1,2,3,5,15
15:1,3,5,15
21:1,3,7,21
28:1,2,4,7,14,28
"""
##we can see that 28 is the first number to have over five divisors.abs
##what is the value of the first triangle number to have over five hundred divisors?
"""
def euler11():
    result ={}
    result_divisor ={}
    for i in range(1, 10000):
        resultnum = i
        for j in range(1,i,1):
            resultnum += j
        result[i]= resultnum

        divisor = []
        for h in range(1, resultnum+1,1):

            if resultnum % h == 0:
                
                divisor.append(h)
            result_divisor[resultnum] = divisor 
            if len(divisor) > 500:
                return i
    return False
    ##return  result, result_divisor

##inifinite rooooop
print(euler11())
"""

##triangle numberの公式　n*(n+1)/2


def euler11():
    
    result = {}
    for i in range(1,100000,1):
        triangle_num = round((i*(i+1))/2)
        divisor = []
        for j in range(1, int(math.sqrt(triangle_num)) + 1):
            
            if triangle_num % j == 0:
                divisor.append(j)
                if j != triangle_num//j:
                    divisor.append(triangle_num//j)
        
        result[triangle_num]= divisor

        if len(divisor) > 500:
            return triangle_num
    return   result  

print(euler11())    